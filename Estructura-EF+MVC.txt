CarritoComprasApp.sln
│
├── Domain/               ← Capa de entidades del dominio
│   └── Models/
│       ├── Usuario.cs
│       ├── Producto.cs
│       └── Transaccion.cs
│
├── Application/          ← Capa de lógica de negocio
│   ├── Interfaces/
│   │   ├── IUsuarioService.cs
│   │   ├── IProductoService.cs
│   │   └── ITransaccionService.cs
│   └── Services/
│       ├── UsuarioService.cs
│       ├── ProductoService.cs
│       └── TransaccionService.cs
│
├── Infraestructure/       ← Capa de acceso a datos con EF Core
│   ├── Data/
│   │   ├── AppDbContext.cs
│   │   └── DbInitializer.cs             ← Para datos iniciales (opcional)
│   ├── Interfaces/
│   │   ├── IUsuarioRepository.cs
│   │   ├── IProductoRepository.cs
│   │   └── ITransaccionRepository.cs
│   └── Repositories/
│       ├── UsuarioRepository.cs
│       ├── ProductoRepository.cs
│       └── TransaccionRepository.cs
│
├── Web/                  ← Proyecto principal MVC (.NET Core MVC)
│   ├── Controllers/
│   │   ├── LoginController.cs
│   │   ├── AdminController.cs
│   │   └── ClienteController.cs
│   ├── Views/
│   │   ├── Login/
│   │   │   └── Index.cshtml
│   │   ├── Register/
│   │   │   └── Index.cshtml
│   │   ├── Cliente/
│   │   │   ├── Productos.cshtml
│   │   │   └── ConfirmarCompra.cshtml
│   │   ├── Admin/
│   │   │   ├── Transacciones.cshtml
│   │   │   ├── Usuarios.cshtml
│   │   │   └── Productos.cshtml
│   │   └── Shared/
│   │       ├── _Layout.cshtml
│   │       └── _LoginPartial.cshtml
│   ├── wwwroot/
│   │   ├── css/
│   │   └── js/
│   │       └── validaciones.js          ← Validaciones con JavaScript (opcional)
│   ├── Program.cs
│   └── appsettings.json
│
├── API/                  ← API REST para administrador
│   ├── Controllers/
│   │   ├── ProductosController.cs       ← GET, PUT productos (solo admin)
│   │   └── UsuariosController.cs        ← GET usuarios compradores
│   ├── Program.cs
│   ├── appsettings.json
│   └── Middlewares/
│       └── RoleAuthorizationMiddleware.cs ← (opcional para validar roles)
│
└── Database/             ← Scripts SQL y migraciones
    ├── Migrations/                      ← EF Core migrations
    └── StoreProcedures.sql              ← Procedimientos almacenados


---------------------------------------------------------------------------------------

dotnet new sln -n CarritoComprasApp
cd CarritoComprasApp

dotnet new classlib -n Domain
dotnet new classlib -n Application
dotnet new classlib -n Infrastructure
dotnet new mvc      -n Web
dotnet new webapi   -n API
dotnet new classlib -n Database

dotnet sln CarritoComprasApp.sln add Domain/
dotnet sln CarritoComprasApp.sln add Application/
dotnet sln CarritoComprasApp.sln add Infrastructure/
dotnet sln CarritoComprasApp.sln add Web/
dotnet sln CarritoComprasApp.sln add API/
dotnet sln CarritoComprasApp.sln add Database/

REFERENCIAS
dotnet add Application/ reference Domain
dotnet add Infrastructure/ reference Domain
dotnet add Infrastructure/ reference Application
dotnet add Web/ reference Application
dotnet add Web/ reference Infrastructure
dotnet add API/ reference Application
dotnet add API/ reference Infrastructure


En Infrastructure/ (base de datos con SQL Server y EF):
dotnet add Infrastructure/ package Microsoft.EntityFrameworkCore
dotnet add Infrastructure/ package Microsoft.EntityFrameworkCore.SqlServer
dotnet add Infrastructure/ package Microsoft.EntityFrameworkCore.Design

En Web/ y API/ (para que puedan usar DbContext):
dotnet add Web/ package Microsoft.EntityFrameworkCore.SqlServer
dotnet add API/ package Microsoft.EntityFrameworkCore.SqlServer

Opcionalmente, para Database/ (si manejarás migraciones desde allí):
dotnet add Database/ package Microsoft.EntityFrameworkCore.Tools


---------------------------------------------------
ARCHIVOS CON ERRORES

UsuarioService.cs
ProductoService.cs
TransaccionService.cs

_Layout.cshtml

AdminController.cs

------------------------------------------------------------------------------------

ESTRUCTURA COMPLETA DE ARCHIVOS (EF + MVC + API + JavaScript)
Nombres de tus capas:

Domain → Modelo de dominio (entidades)

Application → Interfaces y servicios de aplicación

Infrastructure → Repositorios, DbContext, acceso a datos con EF

Web → MVC principal (controladores, vistas, JS, validaciones)

API → API REST (consumo y actualización)

Database → Migraciones y procedimientos almacenados

🧱 1. Raíz del Proyecto
Archivo o Carpeta	Propósito
CarritoComprasApp.sln	Solución raíz. Incluye todos los proyectos.
README.md	Documentación del proyecto.

🧾 2. Domain (CarritoCompras.Domain/)
📁 Models/ — Entidades principales del sistema.

Archivo	Contenido clave
Usuario.cs	Id, Nombres, Direccion, Telefono, UsuarioLogin, Identificacion, Clave, Rol
Producto.cs	Id, Nombre, Descripcion, CantidadDisponible
Transaccion.cs	Id, UsuarioId, ProductoId, Cantidad, Fecha

🧠 3. Application (CarritoCompras.Application/)
📁 Interfaces/ — Contratos para servicios de dominio.
📁 Services/ — Implementación de lógica de negocio.

Archivo	Descripción
IUsuarioService.cs	Crear, autenticar y listar usuarios.
IProductoService.cs	Obtener y actualizar productos.
ITransaccionService.cs	Registrar y consultar transacciones.
UsuarioService.cs	Implementa IUsuarioService. ***
ProductoService.cs	Implementa IProductoService. ***
TransaccionService.cs	Implementa ITransaccionService.

🗄️ 4. Infrastructure (CarritoCompras.Infrastructure/)
📁 Data/ — DbContext y datos iniciales.
📁 Interfaces/ — Repositorios.
📁 Repositories/ — Implementación repositorios EF.

Archivo	Descripción
AppDbContext.cs	DbSets (Usuarios, Productos, Transacciones)
DbInitializer.cs (opcional)	Carga datos iniciales
IUsuarioRepository.cs	CRUD, buscar por login.
IProductoRepository.cs	Listar y actualizar productos.
ITransaccionRepository.cs	Insertar y listar transacciones.
UsuarioRepository.cs	Implementación con EF.
ProductoRepository.cs	Implementación con EF.
TransaccionRepository.cs	Implementación con EF. ***

🌐 5. Web MVC (CarritoCompras.Web/)
📁 Controllers/ — Lógica de vistas.
📁 Views/ — Archivos .cshtml.
📁 wwwroot/ — JS y CSS.

Controladores:
Archivo	Descripción
LoginController.cs	Login, logout, verificación de rol.
AdminController.cs	Vista de transacciones, productos, usuarios.
ClienteController.cs	Compra de productos.

Vistas:
Ruta	Funcionalidad principal
Login/Index.cshtml	Formulario login.
Register/Index.cshtml	Formulario registro.
Cliente/Productos.cshtml	Lista productos.
Cliente/ConfirmarCompra.cshtml	Confirma si quiere comprar cantidad disponible.
Admin/Transacciones.cshtml	Ver historial.
Admin/Usuarios.cshtml	Ver lista de compradores.
Admin/Productos.cshtml	Actualizar productos.
Shared/_Layout.cshtml	Layout principal.
Shared/_LoginPartial.cshtml	Fragmento de login para navbar.

JS:
Archivo	Función
wwwroot/js/validaciones.js	Validaciones en cliente (login, registro, compra).

📡 6. API REST (CarritoCompras.API/)
📁 Controllers/ — Acciones protegidas por rol Admin.
📁 Middlewares/ — Validación de roles (opcional).

Archivo	Función
ProductosController.cs	GET, PUT productos.
UsuariosController.cs	GET compradores.
RoleAuthorizationMiddleware.cs	(Opcional) validar si el usuario es admin.

🧮 7. Database (CarritoCompras.Database/)
Archivo	Descripción
Migrations/	Migraciones generadas por EF.
StoreProcedures.sql	Procedimientos almacenados (insertar transacciones, consultar historial, etc).

dotnet ef migrations add InitialCreate --project Infraestructure --startup-project Web --output-dir Migrations 
dotnet ef database update --project Infraestructure --startup-project Web 





